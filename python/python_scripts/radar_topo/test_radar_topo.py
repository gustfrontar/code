# -*- coding: utf-8 -*-
"""
@author:
"""

import sys
sys.path.append('../../common_python/common_functions/')
sys.path.append('../../common_python/common_modules/')
sys.path.append('../../common_python/common_radar/')

import numpy as np
import os

import common_gdem_functions as cgf
import matplotlib.pyplot as plt
import common_radar as cr
import binary_io as bio

os.system('export OMP_STACKSIZE=1G')

#FIRST STEP : INTERPOLATE TOPOGRAPHY DATA TO A POLAR COORDINATE GRID CENTER AT THE RADAR LOCATION.
#ASSUME A CERTAIN RANGE RESOLUTION AND AZIMUTH RESOLUTION. (THIS IS DONE WITH PYTHON AND FORTRAN)
#This step has to be performed only once, then the topography can be interpolated to each radar
#volumne using the topography in polar coordinates. 

cen_lat=34.711
cen_lon=134.951

rmin=100
dr=100
nr=601
amin=0
da=1
na=360
read_raster=True
polar_coord_topo_file='./Kobe_gdem_1deg_100m.dat'
radar_topo_file='./Kobe_gdem_l98_r60.dat'

datapath='/home/ra001011/a03471/data/input_data/raster_tiles/'


if read_raster    :   #We read the original data and interpolate it to a polar grid centered at the radar.
 
   my_topo=cgf.raster_gdem_v2_to_radar( cen_lon , cen_lat , rmin , dr , nr , amin , da , na , datapath ) 

   #Example: Plot topo interpolated to a polar coordintae grid using box averaging.
   #plt.pcolor( my_topo['longitude'],my_topo['latitude'],my_topo['mean'])
   #plt.colorbar()
   #plt.title('Topography data interpolated to a polar coordinate grid')
   #plt.show()

   #Output the data in binary form
   tmp_array=np.zeros((nr,na,8))
   tmp_array[:,:,0]=my_topo['mean']
   tmp_array[:,:,1]=my_topo['max']
   tmp_array[:,:,2]=my_topo['min']
   tmp_array[:,:,3]=my_topo['number']
   tmp_array[:,:,4]=my_topo['range']
   tmp_array[:,:,5]=my_topo['azimuth']
   tmp_array[:,:,6]=my_topo['latitude']
   tmp_array[:,:,7]=my_topo['longitude']

   bio.write_data_direct_woundef(polar_coord_topo_file,tmp_array,'f4')


else   :

   my_topo=dict()
   tmp_array=bio.read_data_direct(polar_coord_topo_file,nr,na,8,'f4')

   my_topo['mean']=tmp_array[:,:,0]
   my_topo['max']=tmp_array[:,:,1]
   my_topo['min']=tmp_array[:,:,2]
   my_topo['number']=tmp_array[:,:,3]
   my_topo['range']=tmp_array[:,:,4]
   my_topo['azimuth']=tmp_array[:,:,5]
   my_topo['latitude']=tmp_array[:,:,6]
   my_topo['longitude']=tmp_array[:,:,7]

   #Example: Plot topo interpolated to a polar coordintae grid using box averaging.
   #lt.pcolor( my_topo['longitude'],my_topo['latitude'],my_topo['mean'])
   #plt.colorbar()
   #plt.title('Topography data interpolated to a polar coordinate grid')
   #plt.show()

#STEP TWO : READ A RADAR VOLUME AND INTERPOLATE THE TOPOGRAPHY FOR EACH PPI SCAN
#NOTE: We can use the same "my_topo" dict with multiple radar files.

#radar_file='/home/ra001011/a03471/data/input_data/obs/RAW_PAWR_DATA/Z_20140911-080030.dat'
radar_file='./Z_20160820-172500.dat'

#radar_data=cr.radarobs_read(radar_file, endian='>')

print('Reading raw data file')
radar_data=cr.radarobs_read_preqc( radar_file , endian='' )

#Interpolate the topography to each ppi
print('Interpolationg the topograhpy')
cr.radar_topography(radar_data,my_topo)

#Example: Plot topo interpolated to elevation 2
#plt.pcolor( radar_data['lon'][1,:,:],radar_data['lat'][1,:,:],radar_data['topo'][1,:,:])
#plt.colorbar()
#plt.title('Topography data interpolated to one PPI')
#plt.show()

#STEP THREE: WRITE THE OUTPUT IN THE SAME FORMAT AS REQUIRED BY THE QC ROUTINE.
#Write the data to a binary file.
print('Writing the topography')
tmp_array=np.transpose(radar_data['topo'],(1,2,0)) #Fortran codes expecst the data in nx,ny,nz order
bio.write_data_direct_woundef(radar_topo_file,tmp_array,'f4')

#################################################################################################################
#Test: Read the data generated with the matlab code and compare it with the data generated by the python code.

#We read a binary file produced by the old matlab code.
#old_topo_file='/home/ra001011/a03471/data/input_data/obs/RAW_PAWR_DATA/terrain_20130713.bin'
#topo_old=bio.read_data_direct(old_topo_file,radar_data['nr'],radar_data['na'],radar_data['ne'],'f4')
#topo_old=np.transpose(topo_old,(2,0,1))

#We read the new data from the binary file to confirm that data order is the same.
#topo_new=bio.read_data_direct(radar_topo_file,radar_data['nr'],radar_data['na'],radar_data['ne'],'f4')
#topo_new=np.transpose(topo_new,(2,0,1))

#elev=1
#plt.figure()
#plt.subplot(1,2,1)

#plt.pcolor( radar_data['lon'][elev,:,:],radar_data['lat'][elev,:,:],topo_new[elev,:,:])
#plt.colorbar()
#plt.title('Topography (New Code)')

#plt.subplot(1,2,2)
#plt.pcolor( radar_data['lon'][elev,:,:],radar_data['lat'][elev,:,:],topo_old[elev,:,:])
#plt.colorbar()
#plt.title('Topography (Old Code)')


#plt.show()





