
function [ verification ]=verification_fun(for_data_vel,obs_data_vel,for_data_dir,obs_data_dir,)
%Inputs:
%for_data_vel un array conteniendo los pronosticos del WRF. Cada fila es un pronostico, cada columna representa un plazo de pronostico. 
 
%obs_data_vel un array conteniendo los valores de viento observados en la torre del parque que corresponde a los valores pronosticados por el WRF. Es decir que corresponde a la misma fecha que los pronosticos realizados por el WRF.
% dates es un array conteniendo la informacion de las fechas.



nanrows=any( isnan(for_data_vel) , 2) | any(isnan(obs_data_vel) , 2) ;

for_data_vel(nanrows,:)=[];
obs_data_vel(nanrows,:)=[];

for_data_dir(nanrows,:)=[];
obs_data_dir(nanrows,:)=[];

nlead=size(for_data_vel,2);
nfor=size(for_data_vel,1);

%==========================================================================
%CALCULO LOS ERRORES PARA LA INTENSIDAD
%==========================================================================

verification.VelRmse= sqrt( nanmean( ( obs_data_vel - for_data_vel ).^2 , 1 ) ) ;

verification.VelBias= nanmean( ( obs_data_vel - for_data_vel ) , 1 )  ;

verification.VelRmsedebias= sqrt( nanmean( ( obs_data_vel - for_data_vel ).^2 , 1 ) - verification.VelBias );

verification.VelMeanObs=nanmean( obs_data_vel , 1 );
verification.VelMeanFor=nanmean( for_data_vel , 1 );

verification.VelStdObs=nanstd( obs_data_vel , [] , 1 );
verification.VelStdFor=nanstd( for_data_vel , [] , 1 );


%Calculo el coeficiente de correlacion y el ajuste lineal.

for il=1:nlead

  tmpfor=for_data_vel(:,il);
  tmpobs=obs_data_vel(:,il);

  tmp=corrcoef(tmpfor,tmpobs);
  
  verification.VelCorrelation(il)=tmp(1,2);

  verification.VelP(:,il)=polyfit(tmpfor,tmpobs,1);

end


%==========================================================================
%CALCULO LOS ERRORES PARA LA DIRECCION
%==========================================================================

%Primero corrijo los pronosticos para evitar que la discontinuidad en 0 afecte los scores.

DirDiff=for_data_dir - obs_data_dir;

for ifor=1:nfor
 for il=1:nlead
 
    if( DirDiff(ifor,il) > 180 )
      DirDiff(ifor,il) =  DirDiff(ifor,il) - 360 ;
    end
 
    if( DirDiff(ifor,il) < -180 )
      DirDiff(ifor,il) = DirDiff(ifor,il) + 360 ;
    end


 end
end

%plot( for_data_dir(:,150) , obs_data_dir(:,150) ,'o');


%Una vez hecho esto podemos calcular de manera segura los scores para la direccion.


%Calculo el RMSE y el bias

verification.DirRmse= sqrt( nanmean( ( DirDiff ).^2 , 1 ) ) ;

verification.DirBias= nanmean( ( DirDiff ) , 1 )  ;

verification.DirRmsedebias= sqrt( nanmean( ( DirDiff ).^2 , 1 ) - verification.DirBias );

verification.DirMeanObs=nanmean( obs_data_dir , 1 );
verification.DirMeanFor=nanmean( for_data_dir , 1 );

verification.DirStdObs=nanstd( obs_data_dir , [] , 1 );
verification.DirStdFor=nanstd( for_data_dir , [] , 1 );

%Calculo el coeficiente de correlacion y el ajuste lineal.

for il=1:nlead

  tmpfor=obs_data_dir(:,il)+DirDiff(:,il);
  tmpobs=obs_data_dir(:,il);

  tmp=corrcoef(tmpfor,tmpobs);

  verification.DirCorrelation(il)=tmp(1,2);

  verification.DirP(:,il)=polyfit(tmpfor,tmpobs,1);

end




